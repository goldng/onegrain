<button class='first' id='size'>
  Size
</button><button class='last active' id='count'>
  Count
</button>

<div id="sidebar" style="float:right"></div>
<div id="chart"></div>

<script>
var width = 960,
    height = 700,
    radius = Math.min(width, height) / 2,
    color = d3.scale.category20c();

var vis = d3.select("#chart").append("svg:svg")
    .attr("width", width)
    .attr("height", height);

// group for pie
var pie_group = vis.append("svg:g")
	.attr("class", "pie")
	.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

// group for labels
var label_group = vis.append("svg:g")
	.attr("class", "label_group")
	.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

// group for centre text
var centre_group = vis.append("svg:g")
	.attr("class", "centre_group")
	.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

var totalLabel = centre_group.append("svg:text")
	.attr("class", "label")
	.attr("dy", -15)
	.attr("text-anchor", "middle") // text-align: right
	.text("TOTAL");

var partition = d3.layout.partition()
    .sort(null)
    .size([2 * Math.PI, radius * radius])
    .value(function(d) { return 1; });

var arc = d3.svg.arc()
    .startAngle(function(d) { return d.x; })
    .endAngle(function(d) { return d.x + d.dx; })
    .innerRadius(function(d) { return Math.sqrt(d.y); })
    .outerRadius(function(d) { return Math.sqrt(d.y + d.dy); });

d3.json("data.json", function(json) {
  var path = pie_group.data([json]).selectAll("path")
      .data(partition.nodes)
    .enter().append("path")
      //.attr("display", function(d) { return d.depth ? null : "none"; }) // hide inner ring
      .attr("display", function(d) { 
		if (d.depth > 1)
			return "none";
		}) // only show first ring
		.attr("d", arc)
      .attr("fill-rule", "evenodd")
      .style("stroke", "#fff")
      .style("fill", function(d) { return color((d.children ? d : d.parent).name); })
      .each(stash)
		.on("click", function(d) {
			
			
			d3.selectAll("path").attr("display", function(child) {
				
				$('#sidebar').append('<p>' + child.name + ' ' + child.depth + '</p>');
				
				if (child.parent == d) {
					return "block";
				}
				else {
					return "none";
				}
			});
			
		});

  d3.select("#size").on("click", function() {
    path
        .data(partition.value(function(d) { return d.size; }))
      .transition()
        .duration(1500)
        .attrTween("d", arcTween);

    d3.select("#size").classed("active", true);
    d3.select("#count").classed("active", false);
  });

  d3.select("#count").on("click", function() {
    path
        .data(partition.value(function(d) { return 1; }))
      .transition()
        .duration(1500)
        .attrTween("d", arcTween);

    d3.select("#size").classed("active", false);
    d3.select("#count").classed("active", true);
  });
});

// Stash the old values for transition.
function stash(d) {
  d.x0 = d.x;
  d.dx0 = d.dx;
}

// Interpolate the arcs in data space.
function arcTween(a) {
  var i = d3.interpolate({x: a.x0, dx: a.dx0}, a);
  return function(t) {
    var b = i(t);
    a.x0 = b.x;
    a.dx0 = b.dx;
    return arc(b);
  };
}

</script>
